class Memory{
    // This works, because when we set the base address of the ram variable to be 0
    // Thus when we push this value as the base address for array usage, it moves to the given address location in RAM
    static Array ram, heap;

    function void init(){
        let ram = 0;

        // Heap is implemented with the [0] = size of current free block, [1] = location of next free_list
        let heap = 2048; // Heap Base Address
        let heap[0] = 0;
        let heap[1] = 14335; // 16384 - 2048
        return;
    }

    // returns the value at the address in RAM
    function int peek(int address){
        return ram[address];
    }

    // sets the value at the address in RAM
    function void poke(int address, int value){
        let ram[address] = value;
        return;
    }

    // Find a free_block that can contains size + 2
    function Array alloc(int size){
        var Array prev_free_block, free_block, next_block;
        let free_block = heap;
        let prev_free_block = 0;

        while(free_block[1] < size){
            let prev_free_block = free_block;
            let free_block = free_block[0];
            if (free_block = 0){
                // Should not happen, as we are unable to find a block
                return -1;
            }
        }
        let next_block = free_block + 2 + size;
        let next_block[0] = free_block[0];
        let next_block[1] = free_block[1] - 2 - size;
        let free_block[0] = 0;
        let free_block[1] = size;

        if (prev_free_block = 0){
            let heap = next_block;
        } else {
            let prev_free_block[0] = next_block;
        }
        return free_block + 2;
    }

    function void dealloc(Array block_base_address){
        var Array free_block;
        let free_block = block_base_address - 2;
        // Adding the deallocated free block to the front
        let free_block[0] = heap;
        let heap = free_block;
        return;
    }
}
